apiVersion: v1
kind: Namespace
metadata:
  name: draft-system
# BLUEPRINT
---
kind: Service
apiVersion: v1
metadata:
  name: blueprint
  namespace: draft-system
spec:
  ports:
  - name: http
    port: 8090
  selector:
    app: blueprint
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: blueprint
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/k8s-pvs/blueprint
  claimRef:
    namespace: draft-system
    name: blueprint
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
              # TODO-RC2: set this to the hostname during boot
              - home-cloud
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: blueprint
  namespace: draft-system
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blueprint
  namespace: draft-system
data:
  config.yaml: |
    service:
      name: blueprint
      domain: core
      env: prod

    badger:
      path: /etc/badger/data

    raft:
      node-id: node_1
      address: blueprint.draft-system.svc.cluster.local
      port: 1111
      bootstrap: true
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: blueprint
  namespace: draft-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blueprint
  template:
    metadata:
      labels:
        app: blueprint
    spec:
      containers:
        - name: blueprint
          image: ghcr.io/steady-bytes/draft-core-blueprint:v0.0.1
          ports:
            - name: grpc
              containerPort: 8090
              protocol: TCP
            - name: raft
              containerPort: 1111
              protocol: TCP
          volumeMounts:
          - name: config
            mountPath: /etc/config.yaml
            subPath: config.yaml
          - name: badger
            mountPath: /etc/badger/data
      volumes:
      - name: config
        configMap:
          name: blueprint
      - name: badger
        persistentVolumeClaim:
          claimName: blueprint
# FUSE
---
kind: Service
apiVersion: v1
metadata:
  name: fuse
  namespace: draft-system
spec:
  ports:
  - name: http
    port: 8090
  selector:
    app: fuse
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fuse
  namespace: draft-system
data:
  config.yaml: |
    service:
      name: fuse
      domain: core
      env: prod
      entrypoint: http://blueprint.draft-system.svc.cluster.local:8090
    fuse:
      address: http://fuse.draft-system.svc.cluster.local:8090
      listener:
        address: 0.0.0.0
        port: 10000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fuse
  namespace: draft-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fuse
  template:
    metadata:
      labels:
        app: fuse
    spec:
      containers:
        - name: fuse
          image: ghcr.io/steady-bytes/draft-core-fuse:v0.0.1
          ports:
            - name: grpc
              containerPort: 8090
              protocol: TCP
          volumeMounts:
          - name: config
            mountPath: /etc/config.yaml
            subPath: config.yaml
      volumes:
      - name: config
        configMap:
          name: fuse
# ENVOY
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  namespace: draft-system
spec:
  ports:
  - name: http
    port: 80
    targetPort: 10000
  selector:
    app: envoy
  externalIPs: [ "10.42.0.1", "HOME_CLOUD_HOST_IP" ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy
  namespace: draft-system
data:
  envoy.yaml: |
    node:
      cluster: fuse-proxy
      id: fuse-proxy-1

    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 19000

    dynamic_resources:
      cds_config:
        resource_api_version: V3
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
          - envoy_grpc:
              cluster_name: xds_cluster
          set_node_on_first_message_only: true
      lds_config:
        resource_api_version: V3
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
          - envoy_grpc:
              cluster_name: xds_cluster
          set_node_on_first_message_only: true

    static_resources:
      clusters:
      - name: xds_cluster
        connect_timeout: 1s
        load_assignment:
          cluster_name: xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    # address in which fuse is running on
                    address: fuse.draft-system.svc.cluster.local
                    port_value: 8090
        http2_protocol_options: {}
        type: STRICT_DNS
      - name: als_cluster
        connect_timeout: 1s
        load_assignment:
          cluster_name: als_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 0.0.0.0
                    port_value: 18090
        http2_protocol_options: {}

    layered_runtime:
      layers:
        - name: runtime-0
          rtds_layer:
            rtds_config:
              resource_api_version: V3
              api_config_source:
                transport_api_version: V3
                api_type: GRPC
                grpc_services:
                  envoy_grpc:
                    cluster_name: xds_cluster
            name: runtime-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  namespace: draft-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      labels:
        app: envoy
    spec:
      containers:
        - name: envoy
          image: envoyproxy/envoy:v1.31.0
          imagePullPolicy: 'IfNotPresent'
          ports:
            - name: proxy
              containerPort: 10000
            - name: admin
              containerPort: 19000
            - name: als
              containerPort: 18090
          volumeMounts:
          - name: config
            mountPath: /etc/envoy/envoy.yaml
            subPath: envoy.yaml
      volumes:
      - name: config
        configMap:
          name: envoy